
bare_metal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005e8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006a8  080006a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006a8  080006a8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080006a8  080006a8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006a8  080006a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006a8  080006a8  000106a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006ac  080006ac  000106ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080006b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  080006bc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  080006bc  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001884  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000923  00000000  00000000  000218b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000278  00000000  00000000  000221e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000210  00000000  00000000  00022458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e01  00000000  00000000  00022668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002f91  00000000  00000000  0003a469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a664  00000000  00000000  0003d3fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c7a5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000730  00000000  00000000  000c7ab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000690 	.word	0x08000690

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08000690 	.word	0x08000690

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 f8d4 	bl	80003d0 <HAL_Init>

  /* Configure the system clock */
  //SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  RCC_CR2 |= (1 << 16);//HSI48ON
 8000228:	4b2b      	ldr	r3, [pc, #172]	; (80002d8 <main+0xb8>)
 800022a:	681a      	ldr	r2, [r3, #0]
 800022c:	4b2a      	ldr	r3, [pc, #168]	; (80002d8 <main+0xb8>)
 800022e:	2180      	movs	r1, #128	; 0x80
 8000230:	0249      	lsls	r1, r1, #9
 8000232:	430a      	orrs	r2, r1
 8000234:	601a      	str	r2, [r3, #0]
  while(!(RCC->CR2 & (1 << 17)));//HSI48RDY control
 8000236:	46c0      	nop			; (mov r8, r8)
 8000238:	4b28      	ldr	r3, [pc, #160]	; (80002dc <main+0xbc>)
 800023a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800023c:	2380      	movs	r3, #128	; 0x80
 800023e:	029b      	lsls	r3, r3, #10
 8000240:	4013      	ands	r3, r2
 8000242:	d0f9      	beq.n	8000238 <main+0x18>
  reg=1;
 8000244:	4b26      	ldr	r3, [pc, #152]	; (80002e0 <main+0xc0>)
 8000246:	2201      	movs	r2, #1
 8000248:	601a      	str	r2, [r3, #0]
  //RCC_CFGR |= (3 << 0);

  RCC_CFGRu.reg.SW = 3;
 800024a:	4b26      	ldr	r3, [pc, #152]	; (80002e4 <main+0xc4>)
 800024c:	781a      	ldrb	r2, [r3, #0]
 800024e:	2103      	movs	r1, #3
 8000250:	430a      	orrs	r2, r1
 8000252:	701a      	strb	r2, [r3, #0]
  if(RCC_CFGRu.reg.SWS == 3)reg=2;
 8000254:	4b23      	ldr	r3, [pc, #140]	; (80002e4 <main+0xc4>)
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	220c      	movs	r2, #12
 800025a:	4013      	ands	r3, r2
 800025c:	b2db      	uxtb	r3, r3
 800025e:	2b0c      	cmp	r3, #12
 8000260:	d102      	bne.n	8000268 <main+0x48>
 8000262:	4b1f      	ldr	r3, [pc, #124]	; (80002e0 <main+0xc0>)
 8000264:	2202      	movs	r2, #2
 8000266:	601a      	str	r2, [r3, #0]
  RCC_CFGR |= (9 << 4);
 8000268:	4b1e      	ldr	r3, [pc, #120]	; (80002e4 <main+0xc4>)
 800026a:	681a      	ldr	r2, [r3, #0]
 800026c:	4b1d      	ldr	r3, [pc, #116]	; (80002e4 <main+0xc4>)
 800026e:	2190      	movs	r1, #144	; 0x90
 8000270:	430a      	orrs	r2, r1
 8000272:	601a      	str	r2, [r3, #0]
  RCC_AHBENR |= (1 << 19);
 8000274:	4b1c      	ldr	r3, [pc, #112]	; (80002e8 <main+0xc8>)
 8000276:	681a      	ldr	r2, [r3, #0]
 8000278:	4b1b      	ldr	r3, [pc, #108]	; (80002e8 <main+0xc8>)
 800027a:	2180      	movs	r1, #128	; 0x80
 800027c:	0309      	lsls	r1, r1, #12
 800027e:	430a      	orrs	r2, r1
 8000280:	601a      	str	r2, [r3, #0]
  GPIOC_MODER |= (1 << 12);
 8000282:	4b1a      	ldr	r3, [pc, #104]	; (80002ec <main+0xcc>)
 8000284:	681a      	ldr	r2, [r3, #0]
 8000286:	4b19      	ldr	r3, [pc, #100]	; (80002ec <main+0xcc>)
 8000288:	2180      	movs	r1, #128	; 0x80
 800028a:	0149      	lsls	r1, r1, #5
 800028c:	430a      	orrs	r2, r1
 800028e:	601a      	str	r2, [r3, #0]
  GPIOC_OTYPER &= ~(1 << 6);
 8000290:	4b17      	ldr	r3, [pc, #92]	; (80002f0 <main+0xd0>)
 8000292:	681a      	ldr	r2, [r3, #0]
 8000294:	4b16      	ldr	r3, [pc, #88]	; (80002f0 <main+0xd0>)
 8000296:	2140      	movs	r1, #64	; 0x40
 8000298:	438a      	bics	r2, r1
 800029a:	601a      	str	r2, [r3, #0]
  GPIOC_OSPEEDR |= (3 << 6);
 800029c:	4b15      	ldr	r3, [pc, #84]	; (80002f4 <main+0xd4>)
 800029e:	681a      	ldr	r2, [r3, #0]
 80002a0:	4b14      	ldr	r3, [pc, #80]	; (80002f4 <main+0xd4>)
 80002a2:	21c0      	movs	r1, #192	; 0xc0
 80002a4:	430a      	orrs	r2, r1
 80002a6:	601a      	str	r2, [r3, #0]
	  /*if(GPIOA_IDRu.bits.B0){
		  GPIOC_ODRu.bits.B6 = 1;
	  }else{
		  GPIOC_ODRu.bits.B6 = 0;
	  }*/
	  GPIOC_ODR |= (1 << 6);
 80002a8:	4b13      	ldr	r3, [pc, #76]	; (80002f8 <main+0xd8>)
 80002aa:	681a      	ldr	r2, [r3, #0]
 80002ac:	4b12      	ldr	r3, [pc, #72]	; (80002f8 <main+0xd8>)
 80002ae:	2140      	movs	r1, #64	; 0x40
 80002b0:	430a      	orrs	r2, r1
 80002b2:	601a      	str	r2, [r3, #0]
	  HAL_Delay(500);
 80002b4:	23fa      	movs	r3, #250	; 0xfa
 80002b6:	005b      	lsls	r3, r3, #1
 80002b8:	0018      	movs	r0, r3
 80002ba:	f000 f8ed 	bl	8000498 <HAL_Delay>
	  GPIOC_ODR &= ~(1 << 6);
 80002be:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <main+0xd8>)
 80002c0:	681a      	ldr	r2, [r3, #0]
 80002c2:	4b0d      	ldr	r3, [pc, #52]	; (80002f8 <main+0xd8>)
 80002c4:	2140      	movs	r1, #64	; 0x40
 80002c6:	438a      	bics	r2, r1
 80002c8:	601a      	str	r2, [r3, #0]
	  HAL_Delay(500);
 80002ca:	23fa      	movs	r3, #250	; 0xfa
 80002cc:	005b      	lsls	r3, r3, #1
 80002ce:	0018      	movs	r0, r3
 80002d0:	f000 f8e2 	bl	8000498 <HAL_Delay>
	  GPIOC_ODR |= (1 << 6);
 80002d4:	e7e8      	b.n	80002a8 <main+0x88>
 80002d6:	46c0      	nop			; (mov r8, r8)
 80002d8:	40021034 	.word	0x40021034
 80002dc:	40021000 	.word	0x40021000
 80002e0:	20000028 	.word	0x20000028
 80002e4:	40021004 	.word	0x40021004
 80002e8:	40021014 	.word	0x40021014
 80002ec:	48000800 	.word	0x48000800
 80002f0:	48000804 	.word	0x48000804
 80002f4:	48000808 	.word	0x48000808
 80002f8:	48000814 	.word	0x48000814

080002fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000302:	4b0f      	ldr	r3, [pc, #60]	; (8000340 <HAL_MspInit+0x44>)
 8000304:	699a      	ldr	r2, [r3, #24]
 8000306:	4b0e      	ldr	r3, [pc, #56]	; (8000340 <HAL_MspInit+0x44>)
 8000308:	2101      	movs	r1, #1
 800030a:	430a      	orrs	r2, r1
 800030c:	619a      	str	r2, [r3, #24]
 800030e:	4b0c      	ldr	r3, [pc, #48]	; (8000340 <HAL_MspInit+0x44>)
 8000310:	699b      	ldr	r3, [r3, #24]
 8000312:	2201      	movs	r2, #1
 8000314:	4013      	ands	r3, r2
 8000316:	607b      	str	r3, [r7, #4]
 8000318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800031a:	4b09      	ldr	r3, [pc, #36]	; (8000340 <HAL_MspInit+0x44>)
 800031c:	69da      	ldr	r2, [r3, #28]
 800031e:	4b08      	ldr	r3, [pc, #32]	; (8000340 <HAL_MspInit+0x44>)
 8000320:	2180      	movs	r1, #128	; 0x80
 8000322:	0549      	lsls	r1, r1, #21
 8000324:	430a      	orrs	r2, r1
 8000326:	61da      	str	r2, [r3, #28]
 8000328:	4b05      	ldr	r3, [pc, #20]	; (8000340 <HAL_MspInit+0x44>)
 800032a:	69da      	ldr	r2, [r3, #28]
 800032c:	2380      	movs	r3, #128	; 0x80
 800032e:	055b      	lsls	r3, r3, #21
 8000330:	4013      	ands	r3, r2
 8000332:	603b      	str	r3, [r7, #0]
 8000334:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000336:	46c0      	nop			; (mov r8, r8)
 8000338:	46bd      	mov	sp, r7
 800033a:	b002      	add	sp, #8
 800033c:	bd80      	pop	{r7, pc}
 800033e:	46c0      	nop			; (mov r8, r8)
 8000340:	40021000 	.word	0x40021000

08000344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000348:	e7fe      	b.n	8000348 <NMI_Handler+0x4>

0800034a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800034a:	b580      	push	{r7, lr}
 800034c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800034e:	e7fe      	b.n	800034e <HardFault_Handler+0x4>

08000350 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000354:	46c0      	nop			; (mov r8, r8)
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}

0800035a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800035a:	b580      	push	{r7, lr}
 800035c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800035e:	46c0      	nop			; (mov r8, r8)
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}

08000364 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000368:	f000 f87a 	bl	8000460 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800036c:	46c0      	nop			; (mov r8, r8)
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}

08000372 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000372:	b580      	push	{r7, lr}
 8000374:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000376:	46c0      	nop			; (mov r8, r8)
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}

0800037c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800037c:	480d      	ldr	r0, [pc, #52]	; (80003b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800037e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000380:	480d      	ldr	r0, [pc, #52]	; (80003b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000382:	490e      	ldr	r1, [pc, #56]	; (80003bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000384:	4a0e      	ldr	r2, [pc, #56]	; (80003c0 <LoopForever+0xe>)
  movs r3, #0
 8000386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000388:	e002      	b.n	8000390 <LoopCopyDataInit>

0800038a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800038a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800038c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800038e:	3304      	adds	r3, #4

08000390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000394:	d3f9      	bcc.n	800038a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000396:	4a0b      	ldr	r2, [pc, #44]	; (80003c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000398:	4c0b      	ldr	r4, [pc, #44]	; (80003c8 <LoopForever+0x16>)
  movs r3, #0
 800039a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800039c:	e001      	b.n	80003a2 <LoopFillZerobss>

0800039e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800039e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a0:	3204      	adds	r2, #4

080003a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a4:	d3fb      	bcc.n	800039e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003a6:	f7ff ffe4 	bl	8000372 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80003aa:	f000 f94d 	bl	8000648 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ae:	f7ff ff37 	bl	8000220 <main>

080003b2 <LoopForever>:

LoopForever:
    b LoopForever
 80003b2:	e7fe      	b.n	80003b2 <LoopForever>
  ldr   r0, =_estack
 80003b4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80003b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80003c0:	080006b0 	.word	0x080006b0
  ldr r2, =_sbss
 80003c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80003c8:	20000030 	.word	0x20000030

080003cc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003cc:	e7fe      	b.n	80003cc <ADC1_COMP_IRQHandler>
	...

080003d0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003d4:	4b07      	ldr	r3, [pc, #28]	; (80003f4 <HAL_Init+0x24>)
 80003d6:	681a      	ldr	r2, [r3, #0]
 80003d8:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <HAL_Init+0x24>)
 80003da:	2110      	movs	r1, #16
 80003dc:	430a      	orrs	r2, r1
 80003de:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80003e0:	2003      	movs	r0, #3
 80003e2:	f000 f809 	bl	80003f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80003e6:	f7ff ff89 	bl	80002fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80003ea:	2300      	movs	r3, #0
}
 80003ec:	0018      	movs	r0, r3
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	40022000 	.word	0x40022000

080003f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003f8:	b590      	push	{r4, r7, lr}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000400:	4b14      	ldr	r3, [pc, #80]	; (8000454 <HAL_InitTick+0x5c>)
 8000402:	681c      	ldr	r4, [r3, #0]
 8000404:	4b14      	ldr	r3, [pc, #80]	; (8000458 <HAL_InitTick+0x60>)
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	0019      	movs	r1, r3
 800040a:	23fa      	movs	r3, #250	; 0xfa
 800040c:	0098      	lsls	r0, r3, #2
 800040e:	f7ff fe7b 	bl	8000108 <__udivsi3>
 8000412:	0003      	movs	r3, r0
 8000414:	0019      	movs	r1, r3
 8000416:	0020      	movs	r0, r4
 8000418:	f7ff fe76 	bl	8000108 <__udivsi3>
 800041c:	0003      	movs	r3, r0
 800041e:	0018      	movs	r0, r3
 8000420:	f000 f905 	bl	800062e <HAL_SYSTICK_Config>
 8000424:	1e03      	subs	r3, r0, #0
 8000426:	d001      	beq.n	800042c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000428:	2301      	movs	r3, #1
 800042a:	e00f      	b.n	800044c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	2b03      	cmp	r3, #3
 8000430:	d80b      	bhi.n	800044a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000432:	6879      	ldr	r1, [r7, #4]
 8000434:	2301      	movs	r3, #1
 8000436:	425b      	negs	r3, r3
 8000438:	2200      	movs	r2, #0
 800043a:	0018      	movs	r0, r3
 800043c:	f000 f8e2 	bl	8000604 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000440:	4b06      	ldr	r3, [pc, #24]	; (800045c <HAL_InitTick+0x64>)
 8000442:	687a      	ldr	r2, [r7, #4]
 8000444:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000446:	2300      	movs	r3, #0
 8000448:	e000      	b.n	800044c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800044a:	2301      	movs	r3, #1
}
 800044c:	0018      	movs	r0, r3
 800044e:	46bd      	mov	sp, r7
 8000450:	b003      	add	sp, #12
 8000452:	bd90      	pop	{r4, r7, pc}
 8000454:	20000000 	.word	0x20000000
 8000458:	20000008 	.word	0x20000008
 800045c:	20000004 	.word	0x20000004

08000460 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000464:	4b05      	ldr	r3, [pc, #20]	; (800047c <HAL_IncTick+0x1c>)
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	001a      	movs	r2, r3
 800046a:	4b05      	ldr	r3, [pc, #20]	; (8000480 <HAL_IncTick+0x20>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	18d2      	adds	r2, r2, r3
 8000470:	4b03      	ldr	r3, [pc, #12]	; (8000480 <HAL_IncTick+0x20>)
 8000472:	601a      	str	r2, [r3, #0]
}
 8000474:	46c0      	nop			; (mov r8, r8)
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	20000008 	.word	0x20000008
 8000480:	2000002c 	.word	0x2000002c

08000484 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  return uwTick;
 8000488:	4b02      	ldr	r3, [pc, #8]	; (8000494 <HAL_GetTick+0x10>)
 800048a:	681b      	ldr	r3, [r3, #0]
}
 800048c:	0018      	movs	r0, r3
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	2000002c 	.word	0x2000002c

08000498 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b084      	sub	sp, #16
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80004a0:	f7ff fff0 	bl	8000484 <HAL_GetTick>
 80004a4:	0003      	movs	r3, r0
 80004a6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	3301      	adds	r3, #1
 80004b0:	d005      	beq.n	80004be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80004b2:	4b0a      	ldr	r3, [pc, #40]	; (80004dc <HAL_Delay+0x44>)
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	001a      	movs	r2, r3
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	189b      	adds	r3, r3, r2
 80004bc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	f7ff ffe0 	bl	8000484 <HAL_GetTick>
 80004c4:	0002      	movs	r2, r0
 80004c6:	68bb      	ldr	r3, [r7, #8]
 80004c8:	1ad3      	subs	r3, r2, r3
 80004ca:	68fa      	ldr	r2, [r7, #12]
 80004cc:	429a      	cmp	r2, r3
 80004ce:	d8f7      	bhi.n	80004c0 <HAL_Delay+0x28>
  {
  }
}
 80004d0:	46c0      	nop			; (mov r8, r8)
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	46bd      	mov	sp, r7
 80004d6:	b004      	add	sp, #16
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	20000008 	.word	0x20000008

080004e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004e0:	b590      	push	{r4, r7, lr}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	0002      	movs	r2, r0
 80004e8:	6039      	str	r1, [r7, #0]
 80004ea:	1dfb      	adds	r3, r7, #7
 80004ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80004ee:	1dfb      	adds	r3, r7, #7
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	2b7f      	cmp	r3, #127	; 0x7f
 80004f4:	d828      	bhi.n	8000548 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004f6:	4a2f      	ldr	r2, [pc, #188]	; (80005b4 <__NVIC_SetPriority+0xd4>)
 80004f8:	1dfb      	adds	r3, r7, #7
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	b25b      	sxtb	r3, r3
 80004fe:	089b      	lsrs	r3, r3, #2
 8000500:	33c0      	adds	r3, #192	; 0xc0
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	589b      	ldr	r3, [r3, r2]
 8000506:	1dfa      	adds	r2, r7, #7
 8000508:	7812      	ldrb	r2, [r2, #0]
 800050a:	0011      	movs	r1, r2
 800050c:	2203      	movs	r2, #3
 800050e:	400a      	ands	r2, r1
 8000510:	00d2      	lsls	r2, r2, #3
 8000512:	21ff      	movs	r1, #255	; 0xff
 8000514:	4091      	lsls	r1, r2
 8000516:	000a      	movs	r2, r1
 8000518:	43d2      	mvns	r2, r2
 800051a:	401a      	ands	r2, r3
 800051c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	019b      	lsls	r3, r3, #6
 8000522:	22ff      	movs	r2, #255	; 0xff
 8000524:	401a      	ands	r2, r3
 8000526:	1dfb      	adds	r3, r7, #7
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	0018      	movs	r0, r3
 800052c:	2303      	movs	r3, #3
 800052e:	4003      	ands	r3, r0
 8000530:	00db      	lsls	r3, r3, #3
 8000532:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000534:	481f      	ldr	r0, [pc, #124]	; (80005b4 <__NVIC_SetPriority+0xd4>)
 8000536:	1dfb      	adds	r3, r7, #7
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	b25b      	sxtb	r3, r3
 800053c:	089b      	lsrs	r3, r3, #2
 800053e:	430a      	orrs	r2, r1
 8000540:	33c0      	adds	r3, #192	; 0xc0
 8000542:	009b      	lsls	r3, r3, #2
 8000544:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000546:	e031      	b.n	80005ac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000548:	4a1b      	ldr	r2, [pc, #108]	; (80005b8 <__NVIC_SetPriority+0xd8>)
 800054a:	1dfb      	adds	r3, r7, #7
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	0019      	movs	r1, r3
 8000550:	230f      	movs	r3, #15
 8000552:	400b      	ands	r3, r1
 8000554:	3b08      	subs	r3, #8
 8000556:	089b      	lsrs	r3, r3, #2
 8000558:	3306      	adds	r3, #6
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	18d3      	adds	r3, r2, r3
 800055e:	3304      	adds	r3, #4
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	1dfa      	adds	r2, r7, #7
 8000564:	7812      	ldrb	r2, [r2, #0]
 8000566:	0011      	movs	r1, r2
 8000568:	2203      	movs	r2, #3
 800056a:	400a      	ands	r2, r1
 800056c:	00d2      	lsls	r2, r2, #3
 800056e:	21ff      	movs	r1, #255	; 0xff
 8000570:	4091      	lsls	r1, r2
 8000572:	000a      	movs	r2, r1
 8000574:	43d2      	mvns	r2, r2
 8000576:	401a      	ands	r2, r3
 8000578:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	019b      	lsls	r3, r3, #6
 800057e:	22ff      	movs	r2, #255	; 0xff
 8000580:	401a      	ands	r2, r3
 8000582:	1dfb      	adds	r3, r7, #7
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	0018      	movs	r0, r3
 8000588:	2303      	movs	r3, #3
 800058a:	4003      	ands	r3, r0
 800058c:	00db      	lsls	r3, r3, #3
 800058e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000590:	4809      	ldr	r0, [pc, #36]	; (80005b8 <__NVIC_SetPriority+0xd8>)
 8000592:	1dfb      	adds	r3, r7, #7
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	001c      	movs	r4, r3
 8000598:	230f      	movs	r3, #15
 800059a:	4023      	ands	r3, r4
 800059c:	3b08      	subs	r3, #8
 800059e:	089b      	lsrs	r3, r3, #2
 80005a0:	430a      	orrs	r2, r1
 80005a2:	3306      	adds	r3, #6
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	18c3      	adds	r3, r0, r3
 80005a8:	3304      	adds	r3, #4
 80005aa:	601a      	str	r2, [r3, #0]
}
 80005ac:	46c0      	nop			; (mov r8, r8)
 80005ae:	46bd      	mov	sp, r7
 80005b0:	b003      	add	sp, #12
 80005b2:	bd90      	pop	{r4, r7, pc}
 80005b4:	e000e100 	.word	0xe000e100
 80005b8:	e000ed00 	.word	0xe000ed00

080005bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	1e5a      	subs	r2, r3, #1
 80005c8:	2380      	movs	r3, #128	; 0x80
 80005ca:	045b      	lsls	r3, r3, #17
 80005cc:	429a      	cmp	r2, r3
 80005ce:	d301      	bcc.n	80005d4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005d0:	2301      	movs	r3, #1
 80005d2:	e010      	b.n	80005f6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005d4:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <SysTick_Config+0x44>)
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	3a01      	subs	r2, #1
 80005da:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005dc:	2301      	movs	r3, #1
 80005de:	425b      	negs	r3, r3
 80005e0:	2103      	movs	r1, #3
 80005e2:	0018      	movs	r0, r3
 80005e4:	f7ff ff7c 	bl	80004e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005e8:	4b05      	ldr	r3, [pc, #20]	; (8000600 <SysTick_Config+0x44>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005ee:	4b04      	ldr	r3, [pc, #16]	; (8000600 <SysTick_Config+0x44>)
 80005f0:	2207      	movs	r2, #7
 80005f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005f4:	2300      	movs	r3, #0
}
 80005f6:	0018      	movs	r0, r3
 80005f8:	46bd      	mov	sp, r7
 80005fa:	b002      	add	sp, #8
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	e000e010 	.word	0xe000e010

08000604 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	60b9      	str	r1, [r7, #8]
 800060c:	607a      	str	r2, [r7, #4]
 800060e:	210f      	movs	r1, #15
 8000610:	187b      	adds	r3, r7, r1
 8000612:	1c02      	adds	r2, r0, #0
 8000614:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	187b      	adds	r3, r7, r1
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	b25b      	sxtb	r3, r3
 800061e:	0011      	movs	r1, r2
 8000620:	0018      	movs	r0, r3
 8000622:	f7ff ff5d 	bl	80004e0 <__NVIC_SetPriority>
}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	46bd      	mov	sp, r7
 800062a:	b004      	add	sp, #16
 800062c:	bd80      	pop	{r7, pc}

0800062e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800062e:	b580      	push	{r7, lr}
 8000630:	b082      	sub	sp, #8
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	0018      	movs	r0, r3
 800063a:	f7ff ffbf 	bl	80005bc <SysTick_Config>
 800063e:	0003      	movs	r3, r0
}
 8000640:	0018      	movs	r0, r3
 8000642:	46bd      	mov	sp, r7
 8000644:	b002      	add	sp, #8
 8000646:	bd80      	pop	{r7, pc}

08000648 <__libc_init_array>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	2600      	movs	r6, #0
 800064c:	4d0c      	ldr	r5, [pc, #48]	; (8000680 <__libc_init_array+0x38>)
 800064e:	4c0d      	ldr	r4, [pc, #52]	; (8000684 <__libc_init_array+0x3c>)
 8000650:	1b64      	subs	r4, r4, r5
 8000652:	10a4      	asrs	r4, r4, #2
 8000654:	42a6      	cmp	r6, r4
 8000656:	d109      	bne.n	800066c <__libc_init_array+0x24>
 8000658:	2600      	movs	r6, #0
 800065a:	f000 f819 	bl	8000690 <_init>
 800065e:	4d0a      	ldr	r5, [pc, #40]	; (8000688 <__libc_init_array+0x40>)
 8000660:	4c0a      	ldr	r4, [pc, #40]	; (800068c <__libc_init_array+0x44>)
 8000662:	1b64      	subs	r4, r4, r5
 8000664:	10a4      	asrs	r4, r4, #2
 8000666:	42a6      	cmp	r6, r4
 8000668:	d105      	bne.n	8000676 <__libc_init_array+0x2e>
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	00b3      	lsls	r3, r6, #2
 800066e:	58eb      	ldr	r3, [r5, r3]
 8000670:	4798      	blx	r3
 8000672:	3601      	adds	r6, #1
 8000674:	e7ee      	b.n	8000654 <__libc_init_array+0xc>
 8000676:	00b3      	lsls	r3, r6, #2
 8000678:	58eb      	ldr	r3, [r5, r3]
 800067a:	4798      	blx	r3
 800067c:	3601      	adds	r6, #1
 800067e:	e7f2      	b.n	8000666 <__libc_init_array+0x1e>
 8000680:	080006a8 	.word	0x080006a8
 8000684:	080006a8 	.word	0x080006a8
 8000688:	080006a8 	.word	0x080006a8
 800068c:	080006ac 	.word	0x080006ac

08000690 <_init>:
 8000690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000696:	bc08      	pop	{r3}
 8000698:	469e      	mov	lr, r3
 800069a:	4770      	bx	lr

0800069c <_fini>:
 800069c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006a2:	bc08      	pop	{r3}
 80006a4:	469e      	mov	lr, r3
 80006a6:	4770      	bx	lr
